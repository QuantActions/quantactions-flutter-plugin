// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QuantActionsSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreMotion
import FleksyAppsCore
import FleksyKeyboardSDK
import Foundation
import HealthKit
import OSLog
@_exported import QuantActionsSDK
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
extension QuantActionsSDK.QA {
  public func journalEventKinds() -> [QuantActionsSDK.JournalEventKind]
  public func journalEntries() -> [QuantActionsSDK.JournalEntry]
  public func saveJournalEntry(journalEntry: QuantActionsSDK.JournalEntry) throws -> QuantActionsSDK.JournalEntry
  public func deleteJournalEntry(byID id: Swift.String) throws
}
public struct ScreenTimeAggregateElement : QuantActionsSDK.DataPointElement {
  public let screenTime: Swift.Double
  public let socialScreenTime: Swift.Double
}
public struct DataPoint<T> where T : QuantActionsSDK.DataPointElement {
  public let date: Foundation.Date
  public let element: T?
}
public protocol DataPointElement {
}
public struct TrendElement : QuantActionsSDK.DataPointElement {
  public let difference2Weeks: Swift.Double?
  public let statistic2Weeks: Swift.Double?
  public let significance2Weeks: Swift.Double?
  public let difference6Weeks: Swift.Double?
  public let statistic6Weeks: Swift.Double?
  public let significance6Weeks: Swift.Double?
  public let difference1Year: Swift.Double?
  public let statistic1Year: Swift.Double?
  public let significance1Year: Swift.Double?
}
public struct BasicInfo : Swift.Codable {
  public var yearOfBirth: Swift.Int
  public var gender: QuantActionsSDK.Gender
  public var selfDeclaredHealthy: Swift.Bool
  public init(yearOfBirth: Swift.Int = 0, gender: QuantActionsSDK.Gender = .unknown, selfDeclaredHealthy: Swift.Bool = false)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension QuantActionsSDK.QA {
  public var keyboardSettings: QuantActionsSDK.KeyboardSettings {
    get
  }
  public func update(keyboardSettings: QuantActionsSDK.KeyboardSettings)
}
extension QuantActionsSDK.QA {
  public var coreMotionAuthorizationStatus: CoreMotion.CMAuthorizationStatus {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  public func requestCoreMotionAuthorization() async throws -> Swift.Bool
  #endif
}
extension QuantActionsSDK.QA {
  #if compiler(>=5.3) && $AsyncAwait
  public func actionSpeedMetric(participationID: Swift.String, interval: Foundation.DateInterval) async throws -> [QuantActionsSDK.DataPoint<QuantActionsSDK.DoubleValueElement>]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func typingSpeedMetric(participationID: Swift.String, interval: Foundation.DateInterval) async throws -> [QuantActionsSDK.DataPoint<QuantActionsSDK.DoubleValueElement>]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func cognitiveFitnessMetric(participationID: Swift.String, interval: Foundation.DateInterval) async throws -> [QuantActionsSDK.DataPoint<QuantActionsSDK.DoubleValueElement>]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func socialEngagementMetric(participationID: Swift.String, interval: Foundation.DateInterval) async throws -> [QuantActionsSDK.DataPoint<QuantActionsSDK.DoubleValueElement>]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func socialTapsMetric(participationID: Swift.String, interval: Foundation.DateInterval) async throws -> [QuantActionsSDK.DataPoint<QuantActionsSDK.DoubleValueElement>]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func screenTimeAggregateMetric(participationID: Swift.String, interval: Foundation.DateInterval) async throws -> [QuantActionsSDK.DataPoint<QuantActionsSDK.ScreenTimeAggregateElement>]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sleepScoreMetric(participationID: Swift.String, interval: Foundation.DateInterval) async throws -> [QuantActionsSDK.DataPoint<QuantActionsSDK.SleepScoreElement>]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sleepSummaryMetric(participationID: Swift.String, interval: Foundation.DateInterval) async throws -> [QuantActionsSDK.DataPoint<QuantActionsSDK.SleepSummaryElement>]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func trend(participationID: Swift.String, interval: Foundation.DateInterval, trendKind: QuantActionsSDK.TrendKind) async throws -> [QuantActionsSDK.DataPoint<QuantActionsSDK.TrendElement>]
  #endif
}
public struct SubscriptionWithQuestionnaires : Swift.Codable {
  public let cohort: QuantActionsSDK.Cohort
  public let questionnaires: [QuantActionsSDK.Questionnaire]
  public let subscriptionID: Swift.String
  public let tapDeviceIDs: [Swift.String]
  public let premiumFeaturesTTL: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Cohort : Swift.Codable {
  public let id: Swift.String
  public let name: Swift.String
  public let privacyPolicy: Swift.String
  public let canWidthdraw: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Questionnaire : Swift.Codable {
  public let id: Swift.String
  public let name: Swift.String
  public let description: Swift.String
  public let code: Swift.String
  public let cohortID: Swift.String
  public let body: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension QuantActionsSDK.QA {
  public var isHealthKitAuthorizationStatusDetermined: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  public func requestHealthKitAuthorization() async throws -> Swift.Bool
  #endif
}
public enum TrendKind {
  case cognitiveFitness
  case actionSpeed
  case typingSpeed
  case sleepScore
  case sleepLength
  case sleepInterruptions
  case socialEngagement
  case socialScreenTime
  case socialTaps
  case wave
  public static func == (a: QuantActionsSDK.TrendKind, b: QuantActionsSDK.TrendKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Gender : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case male
  case female
  case other
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [QuantActionsSDK.Gender]
  public typealias RawValue = Swift.Int
  public static var allCases: [QuantActionsSDK.Gender] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct JournalEntry : Swift.Identifiable, Swift.Hashable {
  public let id: Swift.String
  public var date: Foundation.Date
  public var note: Swift.String
  public var events: [QuantActionsSDK.JournalEntryEvent]
  public init(date: Foundation.Date, note: Swift.String, events: [QuantActionsSDK.JournalEntryEvent])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: QuantActionsSDK.JournalEntry, b: QuantActionsSDK.JournalEntry) -> Swift.Bool
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public struct JournalEntryEvent : Swift.Identifiable, Swift.Hashable {
  public let id: Swift.String
  public var eventKindID: Swift.String
  public var rating: Swift.Int
  public init(eventKindID: Swift.String, rating: Swift.Int)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: QuantActionsSDK.JournalEntryEvent, b: QuantActionsSDK.JournalEntryEvent) -> Swift.Bool
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public struct SleepSummaryElement : QuantActionsSDK.DataPointElement {
  public let sleepDate: Foundation.Date
  public let wakeDate: Foundation.Date
  public let interruptionsStart: [Foundation.Date]
  public let interruptionsStop: [Foundation.Date]
  public let interruptionsNumberOfTaps: [Swift.Int]
  public let timeZone: Swift.String
}
public struct KeyboardSettings : Swift.Codable, Swift.Equatable {
  public var caseSensitive: Swift.Bool
  public var smartPunctuation: Swift.Bool
  public var autoCorrect: Swift.Bool
  public var autoCapitalization: Swift.Bool
  public var autoLearn: Swift.Bool
  public var doubleSpaceTapAddsPunctuation: Swift.Bool
  public var swipeTyping: Swift.Bool
  public var swipeLeftToDelete: Swift.Bool
  public var autoCorrectAfterPunctuation: Swift.Bool
  public var spacebarMovesCursor: Swift.Bool
  public var hapticFeedback: Swift.Bool
  public var soundFeedback: Swift.Bool
  public init(caseSensitive: Swift.Bool = true, smartPunctuation: Swift.Bool = true, autoCorrect: Swift.Bool = true, autoCapitalization: Swift.Bool = true, autoLearn: Swift.Bool = true, doubleSpaceTapAddsPunctuation: Swift.Bool = true, swipeTyping: Swift.Bool = true, swipeLeftToDelete: Swift.Bool = false, autoCorrectAfterPunctuation: Swift.Bool = true, spacebarMovesCursor: Swift.Bool = true, hapticFeedback: Swift.Bool = true, soundFeedback: Swift.Bool = false)
  public static func == (a: QuantActionsSDK.KeyboardSettings, b: QuantActionsSDK.KeyboardSettings) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SleepScoreElement : QuantActionsSDK.DataPointElement {
  public let sleepScore: Swift.Double
  public let confidenceIntervalLow: Swift.Double
  public let confidenceIntervalHigh: Swift.Double
  public let confidence: Swift.Double
  public let wakeDate: Foundation.Date
  public let timeZone: Swift.String
}
extension QuantActionsSDK.QA {
  public func update(pushNotificationsToken token: Swift.String)
}
public struct JournalEventKind : Swift.Hashable {
  public let id: Swift.String
  public let publicName: Swift.String
  public let iconName: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: QuantActionsSDK.JournalEventKind, b: QuantActionsSDK.JournalEventKind) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct AveragesSleepSummaryElement : QuantActionsSDK.DataPointElement {
  public let sleepDate: Foundation.Date
  public let wakeDate: Foundation.Date
  public let numberOfInterruptions: Swift.Double
}
extension Swift.Array where Element == QuantActionsSDK.DataPoint<QuantActionsSDK.SleepSummaryElement> {
  public var monthlyAverages: [QuantActionsSDK.DataPoint<QuantActionsSDK.AveragesSleepSummaryElement>] {
    get
  }
  public var weeklyAverages: [QuantActionsSDK.DataPoint<QuantActionsSDK.AveragesSleepSummaryElement>] {
    get
  }
}
extension Swift.Array where Element == QuantActionsSDK.DataPoint<QuantActionsSDK.DoubleValueElement> {
  public var monthlyAverages: [QuantActionsSDK.DataPoint<QuantActionsSDK.DoubleValueElement>] {
    get
  }
  public var weeklyAverages: [QuantActionsSDK.DataPoint<QuantActionsSDK.DoubleValueElement>] {
    get
  }
}
extension Swift.Array where Element == QuantActionsSDK.DataPoint<QuantActionsSDK.TrendElement> {
  public var monthlyAverages: [QuantActionsSDK.DataPoint<QuantActionsSDK.TrendElement>] {
    get
  }
  public var weeklyAverages: [QuantActionsSDK.DataPoint<QuantActionsSDK.TrendElement>] {
    get
  }
}
extension Swift.Array where Element == QuantActionsSDK.DataPoint<QuantActionsSDK.ScreenTimeAggregateElement> {
  public var monthlyAverages: [QuantActionsSDK.DataPoint<QuantActionsSDK.ScreenTimeAggregateElement>] {
    get
  }
  public var weeklyAverages: [QuantActionsSDK.DataPoint<QuantActionsSDK.ScreenTimeAggregateElement>] {
    get
  }
}
extension Swift.Array where Element == QuantActionsSDK.DataPoint<QuantActionsSDK.SleepScoreElement> {
  public var monthlyAverages: [QuantActionsSDK.DataPoint<QuantActionsSDK.SleepScoreElement>] {
    get
  }
  public var weeklyAverages: [QuantActionsSDK.DataPoint<QuantActionsSDK.SleepScoreElement>] {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class QAKeyboardViewController : FleksyKeyboardSDK.FKKeyboardViewController {
  @_Concurrency.MainActor(unsafe) @objc override open var appIcon: UIKit.UIImage? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) override public func createConfiguration() -> FleksyKeyboardSDK.KeyboardConfiguration
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func dataCollection(_ data: Swift.String, sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func triggerOpenApp()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Subscription : Swift.Identifiable {
  public let id: Swift.String
  public let deviceIDs: [Swift.String]
  public let cohortID: Swift.String
  public let cohortName: Swift.String
  public let premiumFeaturesTTL: Swift.Int
  public let privacyPolicy: Swift.String
  public typealias ID = Swift.String
}
public struct QA {
  public static let shared: QuantActionsSDK.QA
  public var isDeviceRegistered: Swift.Bool {
    get
  }
  public var deviceID: Swift.String {
    get
  }
  public var isDataCollectionRunning: Swift.Bool {
    get
  }
  public var isKeyboardAdded: Swift.Bool? {
    get
  }
  public var subscriptions: [QuantActionsSDK.Subscription] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  public func setup(basicInfo: QuantActionsSDK.BasicInfo = BasicInfo()) async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func subscribe(participationID: Swift.String) async throws -> QuantActionsSDK.SubscriptionWithQuestionnaires
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func leaveCohort(participationID: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @available(*, deprecated, message: "Use subscriptions() instead to get a list of all subscriptions user is registered to.")
  public func subscription() async throws -> QuantActionsSDK.Subscription?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func update(basicInfo: QuantActionsSDK.BasicInfo) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func syncData() async throws
  #endif
  public func tapEvents(in interval: Foundation.DateInterval) -> [Foundation.Date]
  #if compiler(>=5.3) && $AsyncAwait
  public func sendNote(text: Swift.String) async throws
  #endif
  public func pauseDataCollection()
  public func resumeDataCollection()
  public func numberOfRecordedApps(afterDate date: Foundation.Date) -> Swift.Int
}
public struct QAError {
  public let description: Swift.String
  public let reason: Swift.String?
}
extension QuantActionsSDK.QAError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
public struct DoubleValueElement : QuantActionsSDK.DataPointElement {
  public let value: Swift.Double
  public let confidenceIntervalLow: Swift.Double?
  public let confidenceIntervalHigh: Swift.Double?
}
extension QuantActionsSDK.TrendKind : Swift.Equatable {}
extension QuantActionsSDK.TrendKind : Swift.Hashable {}
extension QuantActionsSDK.Gender : Swift.Equatable {}
extension QuantActionsSDK.Gender : Swift.Hashable {}
extension QuantActionsSDK.Gender : Swift.RawRepresentable {}
