group 'com.quantactions.qa_flutter_plugin'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        google()
        gradlePluginPortal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url = uri("https://storage.googleapis.com/r8-releases/raw")
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.7.20"
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0'
        classpath 'org.jetbrains.kotlin:kotlin-serialization:1.8.10'
        classpath 'com.android.tools:r8:8.2.47'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url = uri("https://storage.googleapis.com/r8-releases/raw")
        }
    }

}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'

android {
    compileSdkVersion 33
    namespace 'com.quantactions.qa_flutter_plugin'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 26
    }

    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.0.0'
        implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
        implementation project(':qa_sdk')
//        implementation 'com.github.QuantActions:QA-Android-SDK:1.0.3-rc06'
        implementation 'com.squareup.moshi:moshi:1.14.0'
        implementation 'com.squareup.moshi:moshi-kotlin:1.14.0'
        implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
